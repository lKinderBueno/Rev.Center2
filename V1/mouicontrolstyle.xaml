<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Style x:Key="baseStyle" TargetType="{x:Type Control}">
    <Setter Property="Control.FontSize" Value="40"/>
    <Setter Property="Control.Foreground" Value="White"/>
    <Setter Property="FrameworkElement.Height" Value="60"/>
    <Setter Property="FrameworkElement.Width" Value="221"/>
  </Style>
  <Style x:Key="OnOffScrollBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FunctionCircleBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Ellipse x:Name="Ellipse" Width="94" Height="94" StrokeThickness="2">
              <Shape.Fill>
                <ImageBrush ImageSource="image\Launcher_20160825-2_03.png"/>
              </Shape.Fill>
            </Ellipse>
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Ellipse" Property="Shape.Fill">
                <Setter.Value>
                  <ImageBrush ImageSource="image\Launcher_20160825_03.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="Ellipse" Property="Shape.Fill">
                <Setter.Value>
                  <ImageBrush ImageSource="image\Launcher_20160825-2_03.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Ellipse" Property="Shape.Fill">
                <Setter.Value>
                  <ImageBrush ImageSource="image\Launcher_20160825-2_03.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FunctionBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="image/btn02_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn02_o.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn02_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn02_d.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ClearBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="image/btn_clear_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_clear_h.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_clear_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_clear_d.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TPSizeBallBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush ImageSource="Image/MyTouchPad/btn_size_normal.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush ImageSource="Image/MyTouchPad/btn_size_hover.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush ImageSource="Image/MyTouchPad/btn_size_press.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush ImageSource="/Image/MyTouchPad/btn_size_disable.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ApplyBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush ImageSource="Image/MyLightBar/btn_02_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush ImageSource="Image/MyLightBar/btn_02_h.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush ImageSource="Image/MyLightBar/btn_02_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush ImageSource="/Image/MyLightBar/btn_02_d.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MyColorBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="image/btn_mycolor_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_mycolor_h.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_mycolor_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_mycolor_d.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MacroKeyBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="image/btn_marcokb_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_marcokb_h.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_marcokb_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_marcokb_d.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FanToolBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="image/btn_fan_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_fan_h.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_fan_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_fan_d.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ColorPadBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush ImageSource="Image/MyTouchPad/btn_color_h.n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush ImageSource="Image/MyTouchPad/btn_color_h.n.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush ImageSource="Image/MyTouchPad/btn_color_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush ImageSource="Image/MyTouchPad/btn_color_h.n.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TitleBarTipBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="image/btn_i_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_i_h.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_i_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn_i_d.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TitleBarCloseBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="Image/MyTouchPad/btn_close.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="Image/MyTouchPad/btn_close.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="Image/MyTouchPad/btn_close.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="Image/MyTouchPad/btn_close.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TitleBarSmallBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="Image/MyTouchPad/btn_small.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="Image/MyTouchPad/btn_small.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="Image/MyTouchPad/btn_small.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="Image/MyTouchPad/btn_small.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TitleBarAccountBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="image/account_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/account_o.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/account_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/account_2.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="HDDetailInfoBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="image/btn01_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn01_o.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn01_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn01_d.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PopBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="image/pop_btn01_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/pop_btn01_o.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/pop_btn01_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/pop_btn01_d.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TitleBarSettingBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="image/setting_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/setting_o.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/setting_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/setting_d.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="PopupPageCloseBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="image/close_pop_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/close_pop_o.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/close_pop_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/close_pop_d.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="HDInfoTabItemTemplate" TargetType="{x:Type TabItem}">
    <Grid Name="Panel">
      <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header"
                        Width="179" Height="50" Margin="0"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="TabItem.IsSelected" Value="true">
        <Setter TargetName="Panel" Property="Panel.Background" Value="#1e8acc"/>
      </Trigger>
      <Trigger Property="TabItem.IsSelected" Value="false">
        <Setter TargetName="Panel" Property="Panel.Background" Value="Transparent"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="LoginBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement" Background="#1e8acc">
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background" Value="#2b9de2"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background" Value="#0c5e90"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background" Value="#14283c"/>
              <Setter Property="Control.Foreground" Value="#4bffffff"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="true">
              <Setter Property="Control.Foreground" Value="White"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DropAccountBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement" Background="#ec4300">
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background" Value="#ff500b"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background" Value="#b73400"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background" Value="#5f3829"/>
              <Setter Property="Control.Foreground" Value="#4bffffff"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="true">
              <Setter Property="Control.Foreground" Value="White"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid x:Name="Grid">
            <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto"
                       Fill="Transparent"/>
            <Border x:Name="Rectangle1" CornerRadius="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    Width="Auto" Height="Auto" Background="{TemplateBinding Control.Background}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="FrameworkElement.Tag" Value="Horizontal">
              <Setter TargetName="Rectangle1" Property="FrameworkElement.Width" Value="Auto"/>
              <Setter TargetName="Rectangle1" Property="FrameworkElement.Height" Value="3"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Foreground" Value="#666666"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Width" Value="6"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid x:Name="GridRoot" Width="6" Background="{TemplateBinding Control.Background}">
            <Grid.RowDefinitions>
              <RowDefinition Height="0"/>
              <RowDefinition Height="0.00001*"/>
              <RowDefinition Height="0"/>
            </Grid.RowDefinitions>
            <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true" Focusable="false">
              <Track.Thumb>
                <Thumb x:Name="Thumb" Background="{TemplateBinding Control.Foreground}"
                       Style="{DynamicResource ScrollThumbs}"/>
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false"/>
              </Track.IncreaseRepeatButton>
              <Track.DecreaseRepeatButton>
                <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false"/>
              </Track.DecreaseRepeatButton>
            </Track>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="Thumb" Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Thumb" Property="Control.Background" Value="#888888"/>
            </Trigger>
            <Trigger SourceName="Thumb" Property="Thumb.IsDragging" Value="true">
              <Setter TargetName="Thumb" Property="Control.Background" Value="#333333"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Thumb" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
              <Setter TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_Track" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
              <Setter Property="FrameworkElement.Width" Value="Auto"/>
              <Setter Property="FrameworkElement.Height" Value="12"/>
              <Setter TargetName="Thumb" Property="FrameworkElement.Tag" Value="Horizontal"/>
              <Setter TargetName="PageDown" Property="ButtonBase.Command" Value="ScrollBar.PageLeftCommand"/>
              <Setter TargetName="PageUp" Property="ButtonBase.Command" Value="ScrollBar.PageRightCommand"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="lightScrollBar" TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Foreground" Value="#666666"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="FrameworkElement.Width" Value="6"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid x:Name="GridRoot" Width="6" Background="{TemplateBinding Control.Background}">
            <Grid.RowDefinitions>
              <RowDefinition Height="0"/>
              <RowDefinition Height="0.00001*"/>
              <RowDefinition Height="0"/>
            </Grid.RowDefinitions>
            <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true" Focusable="false">
              <Track.Thumb>
                <Thumb x:Name="Thumb" Background="{TemplateBinding Control.Foreground}"
                       Style="{DynamicResource ScrollThumbs}"/>
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false"/>
              </Track.IncreaseRepeatButton>
              <Track.DecreaseRepeatButton>
                <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false"/>
              </Track.DecreaseRepeatButton>
            </Track>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="Thumb" Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Thumb" Property="Control.Background" Value="#888888"/>
            </Trigger>
            <Trigger SourceName="Thumb" Property="Thumb.IsDragging" Value="true">
              <Setter TargetName="Thumb" Property="Control.Background" Value="#333333"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Thumb" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
              <Setter TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_Track" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
              <Setter Property="FrameworkElement.Width" Value="Auto"/>
              <Setter Property="FrameworkElement.Height" Value="12"/>
              <Setter TargetName="Thumb" Property="FrameworkElement.Tag" Value="Horizontal"/>
              <Setter TargetName="PageDown" Property="ButtonBase.Command" Value="ScrollBar.PageLeftCommand"/>
              <Setter TargetName="PageUp" Property="ButtonBase.Command" Value="ScrollBar.PageRightCommand"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ScrollViewer}">
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid>
            <Grid Background="{TemplateBinding Control.Background}">
              <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Control.Padding}"
                                      Content="{TemplateBinding ContentControl.Content}"
                                      ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                      CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"/>
              <ScrollBar x:Name="PART_VerticalScrollBar" HorizontalAlignment="Right" Grid.Column="1" Minimum="0.0"
                         Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                         ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                         Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Cursor="Arrow"
                         AutomationProperties.AutomationId="VerticalScrollBar"
                         Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=VerticalOffset, Mode=OneWay}"/>
              <ScrollBar x:Name="PART_HorizontalScrollBar" VerticalAlignment="Bottom" Orientation="Horizontal" Grid.Row="1"
                         Minimum="0.0" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                         ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                         Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Cursor="Arrow"
                         AutomationProperties.AutomationId="HorizontalScrollBar"
                         Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HorizontalOffset, Mode=OneWay}"/>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="0" Background="White" BorderBrush="White"
              BorderThickness="0"/>
      <Image x:Name="Arrow" Width="42" Height="40" HorizontalAlignment="Left" VerticalAlignment="Top"
             Margin="158,0,0,0" Source="image/btn_drop1_n.png"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="#01AFC8"/>
        <Setter TargetName="Arrow" Property="Image.Source" Value="image/btn_drop1_h.png"/>
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="White"/>
        <Setter TargetName="Arrow" Property="Image.Source" Value="image/btn_drop1_p.png"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="#1c82c0"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
    <Border x:Name="PART_ContentHost" Focusable="false" Background="{TemplateBinding Control.Background}"/>
  </ControlTemplate>
  <Style x:Key="ComboBoxItem1" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Foreground" Value="#666666"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="FrameworkElement.MinHeight" Value="40"/>
    <Setter Property="Control.FontSize" Value="16"/>
    <Setter Property="Control.FontWeight" Value="Bold"/>
    <Setter Property="Control.FontFamily" Value="Microsoft JhengHei UI"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border Name="Border" Padding="16,0,0,0" SnapsToDevicePixels="true">
            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Stretch"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ComboBoxItem.IsHighlighted" Value="true">
              <Setter TargetName="Border" Property="Border.Background" Value="#01AFC8"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Border" Property="Border.Background" Value="#01AFC8"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ModeComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="0" Background="White" BorderBrush="White"
              BorderThickness="0"/>
      <Image x:Name="Arrow" Width="42" Height="40" HorizontalAlignment="Left" VerticalAlignment="Top"
             Margin="158,0,0,0" Source="image/MyTouchPad/btn_drop1_n.png"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="#01AFC8"/>
        <Setter TargetName="Arrow" Property="Image.Source" Value="image/MyTouchPad/btn_drop1_h.png"/>
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="White"/>
        <Setter TargetName="Arrow" Property="Image.Source" Value="image/MyTouchPad/btn_drop1_p.png"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="#1c82c0"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="Arrow" Property="Image.Source" Value="image/MyTouchPad/btn_drop1_d.png"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ModeListComboxStyle" TargetType="{x:Type ComboBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="FrameworkElement.MinHeight" Value="40"/>
    <Setter Property="Control.Foreground" Value="#666666"/>
    <Setter Property="Control.FontSize" Value="16"/>
    <Setter Property="Control.FontWeight" Value="Bold"/>
    <Setter Property="Control.FontFamily" Value="Microsoft JhengHei UI"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <ToggleButton Name="ToggleButton" Template="{StaticResource ModeComboBoxToggleButton}" Grid.Column="2"
                          Focusable="false" ClickMode="Press"
                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ContentPresenter Name="ContentSite" IsHitTestVisible="false" Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}" Margin="16,3,23,3"
                              VerticalAlignment="Center" HorizontalAlignment="Left"/>
            <TextBox x:Name="PART_EditableTextBox" Template="{StaticResource ComboBoxTextBox}"
                     Foreground="{TemplateBinding Control.Foreground}"
                     IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}" Visibility="Hidden" Style="{x:Null}"/>
            <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                   AllowsTransparency="true" Focusable="false" PopupAnimation="Slide">
              <Grid Name="DropDown" SnapsToDevicePixels="true"
                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" MaxHeight="598">
                <Border x:Name="DropDownBorder" Background="White" BorderThickness="0" BorderBrush="White"/>
                <ScrollViewer Margin="0,0,0,0" SnapsToDevicePixels="true" VerticalScrollBarVisibility="Auto"
                              Background="Transparent">
                  <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Contained"/>
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Property="Control.Foreground" Value="Transparent"/>
              <Setter Property="Control.Background" Value="#4c97ba"/>
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="DropDownBorder" Property="Border.CornerRadius" Value="0"/>
              <Setter TargetName="DropDownBorder" Property="FrameworkElement.Margin" Value="0,2,0,0"/>
            </Trigger>
            <Trigger Property="ComboBox.IsEditable" Value="true">
              <Setter Property="Control.IsTabStop" Value="false"/>
              <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="OptionComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="0" Background="Transparent"
              BorderBrush="Transparent" BorderThickness="0"/>
      <Image x:Name="Arrow" Width="42" Height="40" HorizontalAlignment="Left" VerticalAlignment="Top"
             Margin="138,0,0,0" Source="image/btn_more1_n.png"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
        <Setter TargetName="Arrow" Property="Image.Source" Value="image/btn_more1_h.png"/>
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
        <Setter TargetName="Arrow" Property="Image.Source" Value="image/btn_more1_p.png"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="Arrow" Property="Image.Source" Value="image/btn_more1_d.png"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="OptionListComboxStyle" TargetType="{x:Type ComboBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="FrameworkElement.MinHeight" Value="40"/>
    <Setter Property="Control.Foreground" Value="#2E352D"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <ToggleButton Name="ToggleButton" Template="{StaticResource OptionComboBoxToggleButton}" Grid.Column="2"
                          Focusable="false" ClickMode="Press"
                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ContentPresenter Name="ContentSite" IsHitTestVisible="false" Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}" Margin="16,3,23,3"
                              VerticalAlignment="Center" HorizontalAlignment="Left"/>
            <TextBox x:Name="PART_EditableTextBox" Template="{StaticResource ComboBoxTextBox}"
                     Foreground="{TemplateBinding Control.Foreground}"
                     IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}" Visibility="Hidden" Style="{x:Null}"/>
            <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                   AllowsTransparency="true" Focusable="false" PopupAnimation="Slide">
              <Grid Name="DropDown" SnapsToDevicePixels="true"
                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" MaxHeight="184">
                <Border x:Name="DropDownBorder" Background="White" BorderThickness="0" BorderBrush="White"/>
                <ScrollViewer Margin="0,0,0,0" SnapsToDevicePixels="true" VerticalScrollBarVisibility="Auto"
                              Background="Transparent">
                  <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Contained"/>
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false"/>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="DropDownBorder" Property="Border.CornerRadius" Value="0"/>
              <Setter TargetName="DropDownBorder" Property="FrameworkElement.Margin" Value="0,2,0,0"/>
            </Trigger>
            <Trigger Property="ComboBox.IsEditable" Value="true">
              <Setter Property="Control.IsTabStop" Value="false"/>
              <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ComboBoxItem2" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Foreground" Value="White"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="FrameworkElement.MinHeight" Value="46"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border Name="Border" Padding="16,0,0,0" SnapsToDevicePixels="true">
            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Stretch"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Border" Property="Border.Background" Value="#495561"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ModeComboBoxToggleButton2" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="0" Background="#141D24" BorderBrush="#141D24"
              BorderThickness="0"/>
      <Image x:Name="Arrow" Width="34" Height="33" HorizontalAlignment="Left" VerticalAlignment="Top"
             Margin="121,0,0,0" Source="image/btn_drop2_n.png"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="#495561"/>
        <Setter TargetName="Arrow" Property="Image.Source" Value="image/btn_drop2_h.png"/>
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="#141D24"/>
        <Setter TargetName="Arrow" Property="Image.Source" Value="image/btn_drop2_p.png"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="#495561"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="Arrow" Property="Image.Source" Value="image/btn_drop2_d.png"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ModeListComboxStyle2" TargetType="{x:Type ComboBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="FrameworkElement.MinHeight" Value="33"/>
    <Setter Property="Control.Foreground" Value="#141D24"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <ToggleButton Name="ToggleButton" Template="{StaticResource ModeComboBoxToggleButton2}" Grid.Column="2"
                          Focusable="false" ClickMode="Press"
                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ContentPresenter Name="ContentSite" IsHitTestVisible="false" Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}" Margin="16,3,23,3"
                              VerticalAlignment="Center" HorizontalAlignment="Left"/>
            <TextBox x:Name="PART_EditableTextBox" Template="{StaticResource ComboBoxTextBox}"
                     Foreground="{TemplateBinding Control.Foreground}"
                     IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}" Visibility="Hidden" Style="{x:Null}"/>
            <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                   AllowsTransparency="true" Focusable="false" PopupAnimation="Slide">
              <Grid Name="DropDown" SnapsToDevicePixels="true"
                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" MaxHeight="184">
                <Border x:Name="DropDownBorder" Background="#141D24" BorderThickness="0" BorderBrush="#141D24"/>
                <ScrollViewer Margin="0,0,0,0" SnapsToDevicePixels="true" VerticalScrollBarVisibility="Auto"
                              Background="Transparent">
                  <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Contained"/>
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Property="Control.Foreground" Value="Transparent"/>
              <Setter Property="Control.Background" Value="#141D24"/>
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="DropDownBorder" Property="Border.CornerRadius" Value="0"/>
              <Setter TargetName="DropDownBorder" Property="FrameworkElement.Margin" Value="0,2,0,0"/>
            </Trigger>
            <Trigger Property="ComboBox.IsEditable" Value="true">
              <Setter Property="Control.IsTabStop" Value="false"/>
              <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="OptionComboBoxToggleButton2" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="0" Background="Transparent"
              BorderBrush="Transparent" BorderThickness="0"/>
      <Image x:Name="Arrow" Width="34" Height="33" HorizontalAlignment="Left" VerticalAlignment="Top"
             Margin="121,0,0,0" Source="image/btn_more2_n.png"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
        <Setter TargetName="Arrow" Property="Image.Source" Value="image/btn_more2_h.png"/>
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
        <Setter TargetName="Arrow" Property="Image.Source" Value="image/btn_more2_p.png"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="OptionListComboxStyle2" TargetType="{x:Type ComboBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="FrameworkElement.MinHeight" Value="33"/>
    <Setter Property="Control.Foreground" Value="#141D24"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid>
            <ToggleButton Name="ToggleButton" Template="{StaticResource OptionComboBoxToggleButton2}" Grid.Column="2"
                          Focusable="false" ClickMode="Press"
                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ContentPresenter Name="ContentSite" IsHitTestVisible="false" Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}" Margin="16,3,23,3"
                              VerticalAlignment="Center" HorizontalAlignment="Left"/>
            <TextBox x:Name="PART_EditableTextBox" Template="{StaticResource ComboBoxTextBox}"
                     Foreground="{TemplateBinding Control.Foreground}"
                     IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}" Visibility="Hidden" Style="{x:Null}"/>
            <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                   AllowsTransparency="true" Focusable="false" PopupAnimation="Slide">
              <Grid Name="DropDown" SnapsToDevicePixels="true"
                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" MaxHeight="184">
                <Border x:Name="DropDownBorder" Background="#141D24" BorderThickness="0" BorderBrush="#141D24"/>
                <ScrollViewer Margin="0,0,0,0" SnapsToDevicePixels="true" VerticalScrollBarVisibility="Auto"
                              Background="Transparent">
                  <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Contained"/>
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
              <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false"/>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="DropDownBorder" Property="Border.CornerRadius" Value="0"/>
              <Setter TargetName="DropDownBorder" Property="FrameworkElement.Margin" Value="0,2,0,0"/>
            </Trigger>
            <Trigger Property="ComboBox.IsEditable" Value="true">
              <Setter Property="Control.IsTabStop" Value="false"/>
              <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="AccountInfoBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement" CornerRadius="0" Background="Transparent" BorderThickness="1"
                  BorderBrush="#1c82c0">
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
            <FrameworkElement.Triggers>
            </FrameworkElement.Triggers>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.BorderBrush" Value="#00a2ff"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background" Value="#003d6a"/>
              <Setter TargetName="ButtonBackgroundElement" Property="Border.BorderThickness" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CheckBoxFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="15,0,0,0" StrokeThickness="1" Stroke="#60000000" StrokeDashArray="1 2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type CheckBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource CheckBoxFocusVisual}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
              <Border x:Name="Border" Width="18" Height="18" CornerRadius="0" Background="Transparent"
                      BorderThickness="1" BorderBrush="White">
                <Image x:Name="CheckMark" Width="17" Height="17" Source="image/check_on.png"/>
              </Border>
            </BulletDecorator.Bullet>
            <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="true"/>
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="false">
              <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
              <Setter TargetName="CheckMark" Property="Image.Source" Value="image/check_on.png"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Border" Property="Border.Background" Value="White"/>
              <Setter Property="Control.Foreground" Value="White"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="WhiteTextStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="TextBlock.Foreground">
      <Setter.Value>
        <SolidColorBrush Color="White"/>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter Property="TextBlock.Foreground" Value="#cccccc"/>
      </Trigger>
      <EventTrigger RoutedEvent="MouseDown">
        <EventTrigger.Actions>
          <BeginStoryboard>
            <Storyboard>
              <ColorAnimation Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)" To="#424242"
                              AutoReverse="true" Duration="0"/>
            </Storyboard>
          </BeginStoryboard>
        </EventTrigger.Actions>
      </EventTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RadioButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="15,0,0,0" StrokeThickness="1" Stroke="#60000000" StrokeDashArray="1 2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type RadioButton}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource RadioButtonFocusVisual}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
              <Grid Width="18" Height="18">
                <Ellipse x:Name="Border" Fill="Transparent" StrokeThickness="1" Stroke="White"/>
                <Ellipse x:Name="CheckMark" Margin="3" Fill="#1e8acc"/>
              </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="true"/>
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="false">
              <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BlueBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <TextBlock x:Name="innerText" Foreground="#3daff5" Cursor="Hand" TextDecorations="Underline">
            <ContentPresenter/>
          </TextBlock>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="innerText" Property="TextBlock.Foreground" Value="#4AC5FF"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="innerText" Property="TextBlock.Foreground" Value="#2b9de2"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TipsCloseBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="image/btn04_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn04_h.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn04_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn04_n.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TipsPreviousNextBtnStyle" TargetType="{x:Type Button}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="ButtonBackgroundElement">
            <Border.Background>
              <ImageBrush Stretch="None" ImageSource="image/btn05_n.png"/>
            </Border.Background>
            <ContentPresenter x:Name="ButtonContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn05_h.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn05_p.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="ButtonBackgroundElement" Property="Border.Background">
                <Setter.Value>
                  <ImageBrush Stretch="None" ImageSource="image/btn05_n.png"/>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>